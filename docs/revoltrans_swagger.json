{
  "components": {
    "schemas": {}
  },
  "info": {
    "description": "API documentation for Revoltrans Logistics Management System",
    "termsOfService": "/tos",
    "title": "Revoltrans Logistics Management API",
    "version": "1.0.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/api/v1/admin/admins": {
      "get": {
        "description": "Retrieve a paginated list of all admin users. Requires super admin access.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 20,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Admin users retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Super admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all admin users",
        "tags": [
          "Admin - Admin Management"
        ]
      },
      "post": {
        "description": "Create a new admin user with specified roles. Requires super admin access.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "description": "Admin email address",
                    "example": "admin@example.com",
                    "format": "email",
                    "type": "string"
                  },
                  "full_name": {
                    "description": "Admin full name",
                    "example": "John Admin",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "password": {
                    "description": "Admin password",
                    "example": "SecurePass123!",
                    "minLength": 8,
                    "type": "string"
                  },
                  "phone_number": {
                    "description": "Admin phone number",
                    "example": 1234567890,
                    "pattern": "^[\\+]?[1-9][\\d]{0,15}$",
                    "type": "string"
                  },
                  "roles": {
                    "description": "List of roles to assign",
                    "example": [
                      "admin",
                      "moderator"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "username": {
                    "description": "Admin username",
                    "example": "admin_user",
                    "maxLength": 50,
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "email",
                  "password",
                  "full_name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Admin created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Super admin access required"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a new admin user",
        "tags": [
          "Admin - Admin Management"
        ]
      }
    },
    "/api/v1/admin/admins/{admin_id}/roles": {
      "put": {
        "description": "Update the roles assigned to an admin user. Requires super admin access.",
        "parameters": [
          {
            "description": "The ID of the admin to update",
            "example": 42,
            "in": "path",
            "name": "admin_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "roles": {
                    "description": "List of roles to assign",
                    "example": [
                      "admin",
                      "moderator"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "roles"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Admin roles updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Super admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update an admin's roles",
        "tags": [
          "Admin - Admin Management"
        ]
      }
    },
    "/api/v1/admin/approvals/drivers": {
      "get": {
        "description": "Retrieve driver approval requests with optional status filtering and pagination.",
        "parameters": [
          {
            "description": "Filter by approval status",
            "example": "PENDING",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "default": "PENDING",
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 20,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/DriverApproval"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver approvals retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get driver approval requests",
        "tags": [
          "Admin - Approvals"
        ]
      }
    },
    "/api/v1/admin/approvals/drivers/{driver_id}": {
      "put": {
        "description": "Update the approval status of a driver application.",
        "parameters": [
          {
            "description": "The ID of the driver to approve/reject",
            "example": 42,
            "in": "path",
            "name": "driver_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "description": "Optional message for the decision",
                    "example": "All documents verified successfully",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "status": {
                    "description": "Approval status",
                    "enum": [
                      "APPROVED",
                      "REJECTED"
                    ],
                    "example": "APPROVED",
                    "type": "string"
                  }
                },
                "required": [
                  "status"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "driver": {
                      "$ref": "#/components/schemas/Driver"
                    },
                    "message": {
                      "example": "Driver approval updated successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver approval status updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Driver not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Approve or reject a driver",
        "tags": [
          "Admin - Approvals"
        ]
      }
    },
    "/api/v1/admin/approvals/payment-requests": {
      "get": {
        "description": "Retrieve payment requests with optional filtering by status, type, and pagination.",
        "parameters": [
          {
            "description": "Filter by approval status",
            "example": "PENDING",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "default": "PENDING",
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by request type",
            "example": "WITHDRAWAL",
            "in": "query",
            "name": "request_type",
            "required": false,
            "schema": {
              "enum": [
                "WITHDRAWAL",
                "REFUND",
                "COMMISSION"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 20,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/PaymentRequest"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment requests retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get payment requests pending approval",
        "tags": [
          "Admin - Approvals"
        ]
      }
    },
    "/api/v1/admin/approvals/payment-requests/{request_id}": {
      "put": {
        "description": "Update the approval status of a payment request.",
        "parameters": [
          {
            "description": "The ID of the payment request to approve/reject",
            "example": 42,
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "description": "Optional message for the decision",
                    "example": "Payment approved and processed",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "status": {
                    "description": "Approval status",
                    "enum": [
                      "APPROVED",
                      "REJECTED"
                    ],
                    "example": "APPROVED",
                    "type": "string"
                  }
                },
                "required": [
                  "status"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Payment request updated successfully",
                      "type": "string"
                    },
                    "payment_request": {
                      "$ref": "#/components/schemas/PaymentRequest"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment request approval status updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Payment request not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Approve or reject a payment request",
        "tags": [
          "Admin - Approvals"
        ]
      }
    },
    "/api/v1/admin/approvals/vendors": {
      "get": {
        "description": "Retrieve vendor approval requests with optional status filtering and pagination.",
        "parameters": [
          {
            "description": "Filter by approval status",
            "example": "PENDING",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "default": "PENDING",
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 20,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/VendorApproval"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor approvals retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get vendor approval requests",
        "tags": [
          "Admin - Approvals"
        ]
      }
    },
    "/api/v1/admin/approvals/vendors/{vendor_id}": {
      "put": {
        "description": "Update the approval status of a vendor application.",
        "parameters": [
          {
            "description": "The ID of the vendor to approve/reject",
            "example": 42,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "description": "Optional message for the decision",
                    "example": "All documents verified successfully",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "status": {
                    "description": "Approval status",
                    "enum": [
                      "APPROVED",
                      "REJECTED"
                    ],
                    "example": "APPROVED",
                    "type": "string"
                  }
                },
                "required": [
                  "status"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor approval updated successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "vendor": {
                      "$ref": "#/components/schemas/Vendor"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor approval status updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Vendor not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Approve or reject a vendor",
        "tags": [
          "Admin - Approvals"
        ]
      }
    },
    "/api/v1/admin/dashboard/financial": {
      "get": {
        "description": "Retrieve financial analytics data within a specified date range.",
        "parameters": [
          {
            "description": "Start date for analytics (YYYY-MM-DD)",
            "example": "Sun, 01 Jan 2023 00:00:00 GMT",
            "in": "query",
            "name": "date_from",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "End date for analytics (YYYY-MM-DD)",
            "example": "Sun, 31 Dec 2023 00:00:00 GMT",
            "in": "query",
            "name": "date_to",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "daily_revenue": {
                      "items": {
                        "properties": {
                          "date": {
                            "example": "2023-01-01",
                            "format": "date",
                            "type": "string"
                          },
                          "revenue": {
                            "example": 1250.5,
                            "format": "float",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pending_payments": {
                      "example": 5000.0,
                      "format": "float",
                      "type": "number"
                    },
                    "processed_payments": {
                      "example": 120000.5,
                      "format": "float",
                      "type": "number"
                    },
                    "top_earning_routes": {
                      "items": {
                        "properties": {
                          "revenue": {
                            "example": 5000.0,
                            "format": "float",
                            "type": "number"
                          },
                          "route": {
                            "example": "A to B",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total_commissions": {
                      "example": 12500.5,
                      "format": "float",
                      "type": "number"
                    },
                    "total_revenue": {
                      "example": 125000.5,
                      "format": "float",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Financial analytics retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get financial analytics",
        "tags": [
          "Admin - Dashboard"
        ]
      }
    },
    "/api/v1/admin/dashboard/journeys": {
      "get": {
        "description": "Retrieve analytics data for journeys within a specified date range.",
        "parameters": [
          {
            "description": "Start date for analytics (YYYY-MM-DD)",
            "example": "Sun, 01 Jan 2023 00:00:00 GMT",
            "in": "query",
            "name": "date_from",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "End date for analytics (YYYY-MM-DD)",
            "example": "Sun, 31 Dec 2023 00:00:00 GMT",
            "in": "query",
            "name": "date_to",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "average_journey_time": {
                      "example": 25.5,
                      "format": "float",
                      "type": "number"
                    },
                    "cancelled_journeys": {
                      "example": 500,
                      "type": "integer"
                    },
                    "completed_journeys": {
                      "example": 4500,
                      "type": "integer"
                    },
                    "daily_stats": {
                      "items": {
                        "properties": {
                          "date": {
                            "example": "2023-01-01",
                            "format": "date",
                            "type": "string"
                          },
                          "journeys": {
                            "example": 45,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "popular_routes": {
                      "items": {
                        "properties": {
                          "count": {
                            "example": 150,
                            "type": "integer"
                          },
                          "route": {
                            "example": "A to B",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total_journeys": {
                      "example": 5000,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey analytics retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get journey analytics",
        "tags": [
          "Admin - Dashboard"
        ]
      }
    },
    "/api/v1/admin/dashboard/summary": {
      "get": {
        "description": "Retrieve key metrics and statistics for the admin dashboard.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "active_drivers": {
                      "example": 300,
                      "type": "integer"
                    },
                    "active_users": {
                      "example": 1200,
                      "type": "integer"
                    },
                    "active_vendors": {
                      "example": 50,
                      "type": "integer"
                    },
                    "pending_approvals": {
                      "example": 25,
                      "type": "integer"
                    },
                    "total_journeys": {
                      "example": 5000,
                      "type": "integer"
                    },
                    "total_revenue": {
                      "example": 125000.5,
                      "format": "float",
                      "type": "number"
                    },
                    "total_users": {
                      "example": 1500,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Dashboard summary retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get dashboard summary metrics",
        "tags": [
          "Admin - Dashboard"
        ]
      }
    },
    "/api/v1/admin/permissions": {
      "get": {
        "description": "Retrieve a list of all available permissions in the system.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Permissions retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all permissions",
        "tags": [
          "Admin - Role Management"
        ]
      }
    },
    "/api/v1/admin/roles": {
      "get": {
        "description": "Retrieve a list of all available roles in the system.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Roles retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all roles",
        "tags": [
          "Admin - Role Management"
        ]
      },
      "post": {
        "description": "Create a new role with specified permissions. Requires super admin access.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Role description",
                    "example": "Can moderate content and users",
                    "maxLength": 200,
                    "type": "string"
                  },
                  "name": {
                    "description": "Role name",
                    "example": "moderator",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "permissions": {
                    "description": "List of permissions to assign",
                    "example": [
                      "read_users",
                      "update_users"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": "Role created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Super admin access required"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Role already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a new role",
        "tags": [
          "Admin - Role Management"
        ]
      }
    },
    "/api/v1/admin/roles/{role_id}": {
      "delete": {
        "description": "Delete an existing role. Requires super admin access.",
        "parameters": [
          {
            "description": "The ID of the role to delete",
            "example": 42,
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Role deleted successfully",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Role deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Super admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Role not found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Role is in use and cannot be deleted"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Delete a role",
        "tags": [
          "Admin - Role Management"
        ]
      },
      "put": {
        "description": "Update an existing role's details and permissions. Requires super admin access.",
        "parameters": [
          {
            "description": "The ID of the role to update",
            "example": 42,
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Role description",
                    "example": "Can moderate content and users",
                    "maxLength": 200,
                    "type": "string"
                  },
                  "name": {
                    "description": "Role name",
                    "example": "moderator",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "permissions": {
                    "description": "List of permissions to assign",
                    "example": [
                      "read_users",
                      "update_users"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": "Role updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Super admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Role not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update a role",
        "tags": [
          "Admin - Role Management"
        ]
      }
    },
    "/api/v1/admin/users": {
      "get": {
        "description": "Retrieve a paginated list of all users with optional filtering by user type, active status, and search query.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 20,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by user type",
            "example": "customer",
            "in": "query",
            "name": "user_type",
            "required": false,
            "schema": {
              "enum": [
                "customer",
                "driver",
                "vendor",
                "admin"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by active status",
            "example": true,
            "in": "query",
            "name": "is_active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Search query for user names, emails, or phone numbers",
            "example": "john",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Users retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all users with pagination and filtering",
        "tags": [
          "Admin - User Management"
        ]
      }
    },
    "/api/v1/admin/users/{user_id}": {
      "get": {
        "description": "Retrieve detailed information for a specific user by ID.",
        "parameters": [
          {
            "description": "The ID of the user to retrieve",
            "example": 42,
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "User details retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "User not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get a specific user's details",
        "tags": [
          "Admin - User Management"
        ]
      }
    },
    "/api/v1/admin/users/{user_id}/status": {
      "patch": {
        "description": "Activate or deactivate a user account.",
        "parameters": [
          {
            "description": "The ID of the user to update",
            "example": 42,
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "is_active": {
                    "description": "User's active status",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "is_active"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "User status updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Admin access required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "User not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Activate or deactivate a user",
        "tags": [
          "Admin - User Management"
        ]
      }
    },
    "/api/v1/auth/admin/permissions": {
      "get": {
        "description": "Retrieves all permissions assigned to the current admin user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "permissions": {
                      "items": {
                        "properties": {
                          "description": {
                            "example": "Ability to manage user accounts",
                            "type": "string"
                          },
                          "id": {
                            "example": 1,
                            "type": "integer"
                          },
                          "name": {
                            "example": "MANAGE_USERS",
                            "type": "string"
                          },
                          "resource": {
                            "example": "users",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved permissions"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access or not an admin user"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all permissions for current admin user",
        "tags": [
          "Authentication - Admin Permisions"
        ]
      }
    },
    "/api/v1/auth/driver-approval-status": {
      "get": {
        "description": "Retrieves the approval status for the current driver user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approval_status": {
                      "enum": [
                        "PENDING",
                        "APPROVED",
                        "REJECTED"
                      ],
                      "example": "PENDING",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved approval status"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access or not a driver user"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver profile not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver profile not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get driver approval status for current driver user",
        "tags": [
          "Authentication - Drivers Approval"
        ]
      }
    },
    "/api/v1/auth/driver/join-request": {
      "post": {
        "description": "Creates a request for a driver to join a specific vendor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "example": "I would like to join your delivery fleet",
                    "type": "string"
                  },
                  "vendor_id": {
                    "example": 456,
                    "type": "integer"
                  }
                },
                "required": [
                  "vendor_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Join request created successfully",
                      "type": "string"
                    },
                    "request": {
                      "properties": {
                        "created_at": {
                          "example": "Mon, 21 Apr 2025 14:30:00 GMT",
                          "format": "date-time",
                          "type": "string"
                        },
                        "driver_id": {
                          "example": 123,
                          "type": "integer"
                        },
                        "id": {
                          "example": 789,
                          "type": "integer"
                        },
                        "status": {
                          "enum": [
                            "PENDING",
                            "APPROVED",
                            "REJECTED"
                          ],
                          "example": "PENDING",
                          "type": "string"
                        },
                        "vendor_id": {
                          "example": 456,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Join request created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access or not a driver user"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver profile not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver profile or vendor not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a request for a driver to join a vendor",
        "tags": [
          "Authentication - Drivers Join Request"
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "description": "Authenticates a user and returns JWT access and refresh tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "required": [
                      "username",
                      "password"
                    ]
                  },
                  {
                    "required": [
                      "email",
                      "password"
                    ]
                  }
                ],
                "properties": {
                  "email": {
                    "example": "john.doe@example.com",
                    "format": "email",
                    "type": "string"
                  },
                  "password": {
                    "example": "SecureP@ssw0rd",
                    "format": "password",
                    "type": "string"
                  },
                  "username": {
                    "example": "johndoe",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                      "type": "string"
                    },
                    "message": {
                      "example": "Login successful",
                      "type": "string"
                    },
                    "refresh_token": {
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "details": {
                          "example": {},
                          "type": "object"
                        },
                        "email": {
                          "example": "john.doe@example.com",
                          "type": "string"
                        },
                        "id": {
                          "example": 123,
                          "type": "integer"
                        },
                        "user_type": {
                          "example": "CLIENT",
                          "type": "string"
                        },
                        "username": {
                          "example": "johndoe",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Login successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Validation error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Invalid credentials",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid credentials"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Account is inactive",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Account inactive"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "User not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "summary": "Login a user and return JWT tokens",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "description": "Logs out the current user and invalidates their JWT tokens",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Logout successful",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Logout successful"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Logout user and invalidate tokens",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/profile-completion": {
      "post": {
        "description": "Completes a user's profile with additional role-specific information based on their user type",
        "parameters": [
          {
            "description": "Profile data based on user type",
            "examples": {
              "client_sample": {
                "summary": "CLIENT Profile Sample",
                "value": {
                  "address": "123 Main Street, Apt 4B, New York, NY 10001",
                  "date_of_birth": "1990-05-15",
                  "preferred_payment_method": "CREDIT_CARD"
                }
              },
              "driver_sample": {
                "summary": "DRIVER Profile Sample",
                "value": {
                  "license_expiry": "2026-08-30",
                  "license_number": "DL123456789",
                  "vehicle_color": "Silver",
                  "vehicle_make": "Honda",
                  "vehicle_model": "Civic",
                  "vehicle_plate": "ABC1234",
                  "vehicle_type": "CAR",
                  "vehicle_year": 2022
                }
              },
              "vendor_sample": {
                "summary": "VENDOR Profile Sample",
                "value": {
                  "business_address": "456 Market Street, Suite 101, San Francisco, CA 94102",
                  "business_description": "Authentic Italian restaurant specializing in homemade pasta, wood-fired pizzas, and traditional Italian desserts. Family-owned establishment serving the community for over 15 years.",
                  "business_email": "contact@tonysitaliankitchen.com",
                  "business_name": "Tony's Italian Kitchen",
                  "business_phone": "+14155551234",
                  "tax_id": "12-3456789"
                }
              }
            },
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ClientProfile"
                },
                {
                  "$ref": "#/definitions/VendorProfile"
                },
                {
                  "$ref": "#/definitions/DriverProfile"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile completed successfully",
            "schema": {
              "properties": {
                "details": {
                  "type": "object"
                },
                "message": {
                  "example": "Profile completed successfully",
                  "type": "string"
                },
                "status": {
                  "example": "success",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "properties": {
                "errors": {
                  "type": "object"
                },
                "message": {
                  "example": "Validation error",
                  "type": "string"
                },
                "status": {
                  "example": "error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "Unauthorized access",
            "schema": {
              "properties": {
                "message": {
                  "example": "Unauthorized access",
                  "type": "string"
                },
                "status": {
                  "example": "error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "properties": {
                "message": {
                  "example": "User not found",
                  "type": "string"
                },
                "status": {
                  "example": "error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "properties": {
                "message": {
                  "type": "string"
                },
                "status": {
                  "example": "error",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Complete user profile with role-specific information",
        "tags": [
          "Authentication - Profile Completion"
        ]
      }
    },
    "/api/v1/auth/re-send-code": {
      "post": {
        "description": "Generates and sends a new SMS verification code to the user's phone number",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_id": {
                    "example": 123,
                    "type": "integer"
                  }
                },
                "required": [
                  "user_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Verification code resent successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Verification code resent successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error or user already verified"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "User not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Too many verification attempts. Please try again later.",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "summary": "Resend verification code to user's phone number",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "description": "Generate a new access token using a valid refresh token",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                      "type": "string"
                    },
                    "message": {
                      "example": "Token refreshed successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Token refreshed successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Invalid refresh token",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid refresh token"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Refresh access token using refresh token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "description": "Creates a new user account with basic details and sends a verification code via SMS",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "example": "john.doe@example.com",
                    "format": "email",
                    "type": "string"
                  },
                  "full_name": {
                    "example": "John Doe",
                    "type": "string"
                  },
                  "password": {
                    "example": "SecureP@ssw0rd",
                    "format": "password",
                    "type": "string"
                  },
                  "phone_number": {
                    "example": "+12025551234",
                    "type": "string"
                  },
                  "user_type": {
                    "enum": [
                      "CLIENT",
                      "VENDOR",
                      "DRIVER",
                      "ADMIN"
                    ],
                    "example": "CLIENT",
                    "type": "string"
                  },
                  "username": {
                    "example": "johndoe",
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "email",
                  "password",
                  "phone_number",
                  "user_type"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "User registered successfully. Please verify your phone number.",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "user_id": {
                      "example": 123,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User registered successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Email already registered",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "An unexpected error occurred",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "summary": "Register a new user with basic details",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "description": "Resets a user's password using a verification code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "example": "12345",
                    "type": "string"
                  },
                  "new_password": {
                    "example": "NewSecureP@ssw0rd",
                    "format": "password",
                    "type": "string"
                  },
                  "user_id": {
                    "example": 123,
                    "type": "integer"
                  }
                },
                "required": [
                  "user_id",
                  "code",
                  "new_password"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Password reset successful",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Password reset successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Invalid verification code",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid verification code or validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "summary": "Reset password using verification code",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/reset-password-request": {
      "post": {
        "description": "Initiates a password reset by sending a verification code to the user's phone number",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "example": "john.doe@example.com",
                    "format": "email",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "If the email exists, a reset code will be sent",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "user_id": {
                      "example": 123,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Reset code sent successfully or user not found (ambiguous for security)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Email is required",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Email not provided or validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "summary": "Request a password reset by sending verification code",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/vendor-approval-status": {
      "get": {
        "description": "Retrieves the approval status for the current vendor user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approval_status": {
                      "enum": [
                        "PENDING",
                        "APPROVED",
                        "REJECTED"
                      ],
                      "example": "PENDING",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully retrieved approval status"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access or not a vendor user"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor profile not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor profile not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get vendor approval status for current vendor user",
        "tags": [
          "Authentication - Vendor Approval"
        ]
      }
    },
    "/api/v1/auth/verify": {
      "post": {
        "description": "Validates the SMS verification code sent to the user's phone number",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "example": "12345",
                    "type": "string"
                  },
                  "user_id": {
                    "example": 123,
                    "type": "integer"
                  }
                },
                "required": [
                  "user_id",
                  "code"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                      "type": "string"
                    },
                    "message": {
                      "example": "Phone number verified successfully",
                      "type": "string"
                    },
                    "refresh_token": {
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "email": {
                          "example": "john.doe@example.com",
                          "type": "string"
                        },
                        "id": {
                          "example": 123,
                          "type": "integer"
                        },
                        "user_type": {
                          "example": "CLIENT",
                          "type": "string"
                        },
                        "username": {
                          "example": "johndoe",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Phone number verified successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Invalid verification code",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid verification code or validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "summary": "Verify user's phone number via SMS code",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/clients/": {
      "get": {
        "description": "Returns all clients for admin users, or only related clients for vendor users",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clients": {
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      },
                      "type": "array"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of clients successfully retrieved"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all clients available to the current user",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/v1/clients/{client_id}": {
      "get": {
        "description": "Get detailed information about a specific client. Access limited by user role - admin can view any client, vendors can only view related clients, and clients can only view themselves.",
        "parameters": [
          {
            "description": "The ID of the client to retrieve",
            "example": 42,
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "client": {
                      "$ref": "#/definitions/Client"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client details successfully retrieved"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Client not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get details for a specific client",
        "tags": [
          "Clients"
        ]
      },
      "put": {
        "description": "Update information for a specific client. Only admin users or the client itself can perform this action.",
        "parameters": [
          {
            "description": "The ID of the client to update",
            "example": 42,
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "address": "123 New Street, City, Country",
                "company_name": "Updated Company Name",
                "contact_email": "new.email@example.com",
                "phone_number": "555-123-4567"
              },
              "schema": {
                "$ref": "#/components/schemas/ClientUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "client": {
                      "$ref": "#/components/schemas/Client"
                    },
                    "message": {
                      "example": "Client updated successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "example": {
                        "contact_email": [
                          "Not a valid email address."
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Client not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update client information",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/v1/clients/{client_id}/journeys": {
      "get": {
        "description": "Get all journeys associated with a specific client. Access limited by user role - admin can view any client's journeys, vendors can only view journeys for related clients, and clients can only view their own journeys.",
        "parameters": [
          {
            "description": "The ID of the client whose journeys to retrieve",
            "example": 42,
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "journeys": {
                      "items": {
                        "$ref": "#/components/schemas/Journey"
                      },
                      "type": "array"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client journeys successfully retrieved"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all journeys for a client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/v1/clients/{client_id}/vendors": {
      "get": {
        "description": "Get all vendors associated with a specific client. Only admin users or the client itself can access this information.",
        "parameters": [
          {
            "description": "The ID of the client whose vendors to retrieve",
            "example": 42,
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "vendors": {
                      "items": {
                        "$ref": "#/components/schemas/Vendor"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Client vendors successfully retrieved"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all vendors related to a client",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/v1/clients/{client_id}/vendors/{vendor_id}": {
      "delete": {
        "description": "Delete an existing relationship between a client and a vendor. Only admin users or the client itself can perform this action.",
        "parameters": [
          {
            "description": "The ID of the client",
            "example": 42,
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The ID of the vendor to disassociate from the client",
            "example": 24,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor relationship removed successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor relationship successfully removed"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Relationship not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Relationship not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Remove a relationship between client and vendor",
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "description": "Create a new relationship between a client and a vendor. Only admin users or the client itself can perform this action.",
        "parameters": [
          {
            "description": "The ID of the client",
            "example": 42,
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The ID of the vendor to associate with the client",
            "example": 24,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor relationship created successfully",
                      "type": "string"
                    },
                    "relationship": {
                      "properties": {
                        "client_id": {
                          "example": 42,
                          "type": "integer"
                        },
                        "created_at": {
                          "example": "2025-04-21T14:30:00Z",
                          "format": "date-time",
                          "type": "string"
                        },
                        "vendor_id": {
                          "example": 24,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor relationship successfully created"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a relationship between client and vendor",
        "tags": [
          "Clients"
        ]
      }
    },
    "/api/v1/drivers/": {
      "get": {
        "description": "Retrieve a paginated list of drivers with optional filtering by status, vendor, and availability. Access restricted to admin, super_admin, and vendor roles.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of drivers per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter drivers by status",
            "example": "active",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "inactive",
                "suspended",
                "pending"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter drivers by vendor ID",
            "example": 123,
            "in": "query",
            "name": "vendor_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filter drivers by availability status",
            "example": true,
            "in": "query",
            "name": "is_available",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "drivers": {
                      "items": {
                        "$ref": "#/components/schemas/Driver"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "has_next": {
                          "example": true,
                          "type": "boolean"
                        },
                        "has_prev": {
                          "example": false,
                          "type": "boolean"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 15,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 150,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Drivers list successfully retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Invalid query parameters",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid query parameters"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions - admin, super_admin, or vendor role required",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all drivers with optional filtering",
        "tags": [
          "Drivers"
        ]
      }
    },
    "/api/v1/drivers/join-requests": {
      "post": {
        "description": "Submit a request to join a specific vendor as a driver. This creates a pending request that must be approved by the vendor.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "basic_request": {
                  "summary": "Basic join request",
                  "value": {
                    "vendor_id": 123
                  }
                },
                "detailed_request": {
                  "summary": "Request with message",
                  "value": {
                    "message": "I am an experienced driver with 5 years of experience and would like to join your team.",
                    "vendor_id": 123
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "message": {
                    "description": "Optional message to include with the request",
                    "example": "I am an experienced driver with 5 years of experience and would like to join your team.",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "vendor_id": {
                    "description": "The ID of the vendor to join",
                    "example": 123,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "vendor_id"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Join request submitted successfully",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Join request submitted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "message": [
                          "Message cannot exceed 500 characters"
                        ],
                        "vendor_id": [
                          "Vendor ID is required"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Vendor ID is required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data or failed to submit"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Join request already exists or you are already a member",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Duplicate request or already a member"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Submit a request to join a vendor as a driver",
        "tags": [
          "Drivers"
        ]
      }
    },
    "/api/v1/drivers/{driver_id}": {
      "get": {
        "description": "Get detailed information about a specific driver by ID. Access may be limited based on user role and relationship to the driver.",
        "parameters": [
          {
            "description": "The ID of the driver to retrieve",
            "example": 42,
            "in": "path",
            "name": "driver_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "driver": {
                      "$ref": "#/components/schemas/Driver"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver details successfully retrieved"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access to driver information",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get driver details by ID",
        "tags": [
          "Drivers"
        ]
      },
      "put": {
        "description": "Update detailed information for a specific driver by ID. Access may be limited based on user role and relationship to the driver.",
        "parameters": [
          {
            "description": "The ID of the driver to update",
            "example": 42,
            "in": "path",
            "name": "driver_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "basic_update": {
                  "summary": "Basic driver information update",
                  "value": {
                    "first_name": "John",
                    "is_available": true,
                    "last_name": "Doe",
                    "phone": 1234567890
                  }
                },
                "complete_update": {
                  "summary": "Complete driver profile update",
                  "value": {
                    "email": "john.doe@example.com",
                    "emergency_contact": {
                      "name": "Jane Doe",
                      "phone": 1987654321,
                      "relationship": "spouse"
                    },
                    "first_name": "John",
                    "is_available": true,
                    "last_name": "Doe",
                    "license_expiry": "Wed, 31 Dec 2025 00:00:00 GMT",
                    "license_number": "DL123456789",
                    "phone": 1234567890,
                    "status": "active",
                    "vehicle_type": "sedan"
                  }
                },
                "status_update": {
                  "summary": "Status change update",
                  "value": {
                    "is_available": false,
                    "status": "inactive"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "description": "Driver's email address",
                    "example": "john.doe@example.com",
                    "format": "email",
                    "type": "string"
                  },
                  "emergency_contact": {
                    "properties": {
                      "name": {
                        "example": "Jane Doe",
                        "type": "string"
                      },
                      "phone": {
                        "example": 1987654321,
                        "type": "string"
                      },
                      "relationship": {
                        "example": "spouse",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "first_name": {
                    "description": "Driver's first name",
                    "example": "John",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "is_available": {
                    "description": "Driver's availability status",
                    "example": true,
                    "type": "boolean"
                  },
                  "last_name": {
                    "description": "Driver's last name",
                    "example": "Doe",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "license_expiry": {
                    "description": "Driver's license expiry date",
                    "example": "Wed, 31 Dec 2025 00:00:00 GMT",
                    "format": "date",
                    "type": "string"
                  },
                  "license_number": {
                    "description": "Driver's license number",
                    "example": "DL123456789",
                    "maxLength": 20,
                    "type": "string"
                  },
                  "phone": {
                    "description": "Driver's phone number",
                    "example": 1234567890,
                    "pattern": "^[\\+]?[1-9][\\d]{0,15}$",
                    "type": "string"
                  },
                  "status": {
                    "description": "Driver's current status",
                    "enum": [
                      "active",
                      "inactive",
                      "suspended",
                      "pending"
                    ],
                    "example": "active",
                    "type": "string"
                  },
                  "vehicle_type": {
                    "description": "Type of vehicle driver operates",
                    "example": "sedan",
                    "type": "string"
                  },
                  "vendor_id": {
                    "description": "Associated vendor ID",
                    "example": 123,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "driver": {
                      "$ref": "#/components/schemas/Driver"
                    },
                    "message": {
                      "example": "Driver updated successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver details successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "email": [
                          "Invalid email format"
                        ],
                        "phone": [
                          "Phone number is required"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request data",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized to update this driver",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update driver details",
        "tags": [
          "Drivers"
        ]
      }
    },
    "/api/v1/drivers/{driver_id}/availability": {
      "post": {
        "description": "Update the availability status of a specific driver. This endpoint allows toggling between available and unavailable states. Access may be limited based on user role and relationship to the driver.",
        "parameters": [
          {
            "description": "The ID of the driver to update availability for",
            "example": 42,
            "in": "path",
            "name": "driver_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "set_available": {
                  "summary": "Set driver as available",
                  "value": {
                    "is_available": true
                  }
                },
                "set_unavailable": {
                  "summary": "Set driver as unavailable",
                  "value": {
                    "is_available": false
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "is_available": {
                    "description": "Driver's availability status",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "is_available"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "available_response": {
                    "summary": "Driver set to available",
                    "value": {
                      "is_available": true,
                      "message": "Driver availability updated"
                    }
                  },
                  "unavailable_response": {
                    "summary": "Driver set to unavailable",
                    "value": {
                      "is_available": false,
                      "message": "Driver availability updated"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "is_available": {
                      "example": true,
                      "type": "boolean"
                    },
                    "message": {
                      "example": "Driver availability updated",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message",
                    "is_available"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Driver availability successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "is_available": [
                          "is_available field is required"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request data",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized to update this driver",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Toggle driver availability status",
        "tags": [
          "Drivers"
        ]
      }
    },
    "/api/v1/drivers/{driver_id}/journeys": {
      "get": {
        "description": "Retrieve a paginated list of all journeys associated with a specific driver. Results can be filtered by journey status. Access may be limited based on user role and relationship to the driver.",
        "parameters": [
          {
            "description": "The ID of the driver to retrieve journeys for",
            "example": 42,
            "in": "path",
            "name": "driver_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of journeys per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter journeys by status",
            "example": "completed",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "confirmed",
                "in_progress",
                "completed",
                "cancelled"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "empty_result": {
                    "summary": "No journeys found",
                    "value": {
                      "driver_id": 42,
                      "journeys": [],
                      "pagination": {
                        "has_next": false,
                        "has_prev": false,
                        "page": 1,
                        "pages": 0,
                        "per_page": 10,
                        "total": 0
                      },
                      "status_filter": null
                    }
                  },
                  "filtered_result": {
                    "summary": "Filtered by status",
                    "value": {
                      "driver_id": 42,
                      "journeys": [
                        {
                          "created_at": "2024-01-15T10:30:00Z",
                          "dropoff_location": "456 Oak Ave",
                          "estimated_duration": 30,
                          "fare": 25.5,
                          "id": 1,
                          "pickup_location": "123 Main St",
                          "status": "completed"
                        }
                      ],
                      "pagination": {
                        "has_next": false,
                        "has_prev": false,
                        "page": 1,
                        "pages": 1,
                        "per_page": 10,
                        "total": 1
                      },
                      "status_filter": "completed"
                    }
                  },
                  "with_journeys": {
                    "summary": "Successful response with journeys",
                    "value": {
                      "driver_id": 42,
                      "journeys": [
                        {
                          "created_at": "2024-01-15T10:30:00Z",
                          "dropoff_location": "456 Oak Ave",
                          "estimated_duration": 30,
                          "fare": 25.5,
                          "id": 1,
                          "pickup_location": "123 Main St",
                          "status": "completed"
                        },
                        {
                          "created_at": "2024-01-15T14:15:00Z",
                          "dropoff_location": "321 Elm St",
                          "estimated_duration": 45,
                          "fare": 32.0,
                          "id": 2,
                          "pickup_location": "789 Pine St",
                          "status": "in_progress"
                        }
                      ],
                      "pagination": {
                        "has_next": true,
                        "has_prev": false,
                        "page": 1,
                        "pages": 3,
                        "per_page": 10,
                        "total": 25
                      },
                      "status_filter": null
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "driver_id": {
                      "description": "ID of the driver",
                      "example": 42,
                      "type": "integer"
                    },
                    "journeys": {
                      "description": "List of journeys for the driver",
                      "items": {
                        "$ref": "#/components/schemas/Journey"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "description": "Pagination information",
                      "properties": {
                        "has_next": {
                          "example": true,
                          "type": "boolean"
                        },
                        "has_prev": {
                          "example": false,
                          "type": "boolean"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 3,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 25,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "status_filter": {
                      "description": "Applied status filter (if any)",
                      "example": "completed",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver journeys retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "page": [
                          "Page must be a positive integer"
                        ],
                        "per_page": [
                          "Per page must be between 1 and 100"
                        ],
                        "status": [
                          "Invalid status value"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request parameters",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request parameters"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized to view this driver's journeys",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all journeys associated with a driver",
        "tags": [
          "Drivers"
        ]
      }
    },
    "/api/v1/drivers/{driver_id}/payments": {
      "get": {
        "description": "Retrieve a paginated list of all payments associated with a specific driver. Results can be filtered by payment type. Access may be limited based on user role and relationship to the driver.",
        "parameters": [
          {
            "description": "The ID of the driver to retrieve payments for",
            "example": 42,
            "in": "path",
            "name": "driver_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of payments per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter payments by type",
            "example": "fare",
            "in": "query",
            "name": "payment_type",
            "required": false,
            "schema": {
              "enum": [
                "fare",
                "bonus",
                "fuel_reimbursement",
                "dispatch_fee",
                "penalty",
                "commission"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "empty_result": {
                    "summary": "No payments found",
                    "value": {
                      "driver_id": 42,
                      "pagination": {
                        "has_next": false,
                        "has_prev": false,
                        "page": 1,
                        "pages": 0,
                        "per_page": 10,
                        "total": 0
                      },
                      "payment_type_filter": null,
                      "payments": [],
                      "summary": {
                        "total_amount": 0.0,
                        "total_count": 0
                      }
                    }
                  },
                  "with_payments": {
                    "summary": "Successful response with payments",
                    "value": {
                      "driver_id": 42,
                      "pagination": {
                        "has_next": true,
                        "has_prev": false,
                        "page": 1,
                        "pages": 5,
                        "per_page": 10,
                        "total": 50
                      },
                      "payment_type_filter": null,
                      "payments": [
                        {
                          "amount": 25.5,
                          "created_at": "2024-01-15T10:30:00Z",
                          "id": 1,
                          "journey_id": 123,
                          "status": "completed",
                          "type": "fare"
                        },
                        {
                          "amount": 50.0,
                          "created_at": "2024-01-15T14:15:00Z",
                          "id": 2,
                          "journey_id": null,
                          "status": "pending",
                          "type": "fuel_reimbursement"
                        }
                      ],
                      "summary": {
                        "total_amount": 1250.75,
                        "total_count": 50
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "driver_id": {
                      "description": "ID of the driver",
                      "example": 42,
                      "type": "integer"
                    },
                    "pagination": {
                      "description": "Pagination information",
                      "properties": {
                        "has_next": {
                          "example": true,
                          "type": "boolean"
                        },
                        "has_prev": {
                          "example": false,
                          "type": "boolean"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 5,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 50,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "payment_type_filter": {
                      "description": "Applied payment type filter (if any)",
                      "example": "fare",
                      "nullable": true,
                      "type": "string"
                    },
                    "payments": {
                      "description": "List of payments for the driver",
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      },
                      "type": "array"
                    },
                    "summary": {
                      "description": "Payment summary statistics",
                      "properties": {
                        "total_amount": {
                          "example": 1250.75,
                          "format": "float",
                          "type": "number"
                        },
                        "total_count": {
                          "example": 50,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver payments retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "page": [
                          "Page must be a positive integer"
                        ],
                        "payment_type": [
                          "Invalid payment type"
                        ],
                        "per_page": [
                          "Per page must be between 1 and 100"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request parameters",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request parameters"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized to view this driver's payments",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all payments associated with a driver",
        "tags": [
          "Drivers"
        ]
      }
    },
    "/api/v1/drivers/{driver_id}/resource-requests": {
      "post": {
        "description": "Submit a request for resources such as fuel reimbursement, dispatch fees, or other driver-related expenses. The request will be reviewed and approved by the vendor.",
        "parameters": [
          {
            "description": "The ID of the driver submitting the request",
            "example": 42,
            "in": "path",
            "name": "driver_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "dispatch_fee_request": {
                  "summary": "Dispatch fee request",
                  "value": {
                    "amount": 25.0,
                    "description": "Dispatch fee for premium service delivery",
                    "expected_date": "2024-01-20",
                    "priority": "high",
                    "request_type": "dispatch_fee"
                  }
                },
                "fuel_request": {
                  "summary": "Fuel reimbursement request",
                  "value": {
                    "amount": 75.5,
                    "description": "Fuel reimbursement for deliveries on Jan 15, 2024. Traveled 200km.",
                    "priority": "medium",
                    "receipt_url": "https://example.com/receipts/12345.jpg",
                    "request_type": "fuel_reimbursement"
                  }
                },
                "maintenance_request": {
                  "summary": "Vehicle maintenance request",
                  "value": {
                    "additional_notes": "Scheduled maintenance as per company policy",
                    "amount": 150.0,
                    "description": "Oil change and tire rotation",
                    "priority": "low",
                    "receipt_url": "https://example.com/receipts/maintenance.pdf",
                    "request_type": "vehicle_maintenance"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "additional_notes": {
                    "description": "Additional notes or comments",
                    "example": "This is for the emergency delivery that was requested by the client.",
                    "maxLength": 1000,
                    "type": "string"
                  },
                  "amount": {
                    "description": "Amount being requested",
                    "example": 75.5,
                    "format": "float",
                    "minimum": 0.01,
                    "type": "number"
                  },
                  "description": {
                    "description": "Detailed description of the request",
                    "example": "Fuel reimbursement for deliveries on Jan 15, 2024. Traveled 200km.",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "expected_date": {
                    "description": "Expected or required date for the resource",
                    "example": "2024-01-20",
                    "format": "date",
                    "type": "string"
                  },
                  "priority": {
                    "default": "medium",
                    "description": "Priority level of the request",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "urgent"
                    ],
                    "example": "medium",
                    "type": "string"
                  },
                  "receipt_url": {
                    "description": "URL to uploaded receipt or proof of expense",
                    "example": "https://example.com/receipts/12345.jpg",
                    "format": "uri",
                    "type": "string"
                  },
                  "request_type": {
                    "description": "Type of resource being requested",
                    "enum": [
                      "fuel_reimbursement",
                      "dispatch_fee",
                      "vehicle_maintenance",
                      "equipment",
                      "other"
                    ],
                    "example": "fuel_reimbursement",
                    "type": "string"
                  }
                },
                "required": [
                  "request_type",
                  "amount",
                  "description"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "successful_submission": {
                    "summary": "Request submitted successfully",
                    "value": {
                      "message": "Resource request submitted successfully",
                      "request": {
                        "amount": 75.5,
                        "created_at": "2024-01-15T16:30:00Z",
                        "description": "Fuel reimbursement for deliveries on Jan 15, 2024. Traveled 200km.",
                        "driver_id": 42,
                        "expected_date": "2024-01-20",
                        "id": 456,
                        "priority": "medium",
                        "request_type": "fuel_reimbursement",
                        "status": "pending"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Resource request submitted successfully",
                      "type": "string"
                    },
                    "request": {
                      "$ref": "#/components/schemas/ResourceRequest"
                    }
                  },
                  "required": [
                    "message",
                    "request"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Resource request submitted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "amount": [
                          "Amount must be greater than 0"
                        ],
                        "description": [
                          "Description is required"
                        ],
                        "receipt_url": [
                          "Invalid URL format"
                        ],
                        "request_type": [
                          "Request type is required"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Failed to submit resource request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data or failed to submit"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized to submit requests for this driver",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Submit a resource request (fuel, dispatch fee, etc.)",
        "tags": [
          "Drivers"
        ]
      }
    },
    "/api/v1/journeys/": {
      "get": {
        "description": "Retrieve a paginated list of journeys with optional filtering by status, client, vendor, or driver.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by journey status",
            "example": "pending",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "pending",
                "confirmed",
                "in_progress",
                "completed",
                "cancelled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by client ID",
            "example": 123,
            "in": "query",
            "name": "client_id",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by vendor ID",
            "example": 456,
            "in": "query",
            "name": "vendor_id",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by driver ID",
            "example": 789,
            "in": "query",
            "name": "driver_id",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "journeys": {
                      "items": {
                        "$ref": "#/components/schemas/Journey"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "has_next": {
                          "example": true,
                          "type": "boolean"
                        },
                        "has_prev": {
                          "example": false,
                          "type": "boolean"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 3,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 25,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of journeys retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all journeys with optional filtering",
        "tags": [
          "Journeys"
        ]
      },
      "post": {
        "description": "Create a new journey plan. Only clients and vendors can create journeys.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "basic_journey": {
                  "summary": "Basic journey creation",
                  "value": {
                    "destination": "456 Oak Ave, City, State",
                    "passenger_count": 2,
                    "pickup_location": "123 Main St, City, State",
                    "pickup_time": "2024-12-31T10:00:00Z",
                    "vehicle_type": "sedan"
                  }
                },
                "detailed_journey": {
                  "summary": "Detailed journey with requirements",
                  "value": {
                    "destination": "456 Oak Ave, City, State",
                    "estimated_cost": 65.0,
                    "passenger_count": 4,
                    "pickup_location": "123 Main St, City, State",
                    "pickup_time": "2024-12-31T10:00:00Z",
                    "special_requirements": "Child seat required",
                    "vehicle_type": "suv",
                    "vendor_id": 123
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "destination": {
                    "description": "Destination address",
                    "example": "456 Oak Ave, City, State",
                    "type": "string"
                  },
                  "estimated_cost": {
                    "description": "Estimated journey cost",
                    "example": 45.5,
                    "format": "float",
                    "type": "number"
                  },
                  "passenger_count": {
                    "description": "Number of passengers",
                    "example": 2,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "pickup_location": {
                    "description": "Pickup location address",
                    "example": "123 Main St, City, State",
                    "type": "string"
                  },
                  "pickup_time": {
                    "description": "Scheduled pickup time",
                    "example": "2024-12-31T10:00:00Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "special_requirements": {
                    "description": "Any special requirements",
                    "example": "Child seat required",
                    "type": "string"
                  },
                  "vehicle_type": {
                    "description": "Required vehicle type",
                    "example": "sedan",
                    "type": "string"
                  },
                  "vendor_id": {
                    "description": "Preferred vendor ID (optional)",
                    "example": 123,
                    "type": "integer"
                  }
                },
                "required": [
                  "pickup_location",
                  "destination",
                  "pickup_time",
                  "vehicle_type",
                  "passenger_count"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "journey": {
                      "$ref": "#/components/schemas/Journey"
                    },
                    "message": {
                      "example": "Journey created successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Failed to create journey",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data or failed to create journey"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a new journey plan",
        "tags": [
          "Journeys"
        ]
      }
    },
    "/api/v1/journeys/{journey_id}": {
      "get": {
        "description": "Retrieve detailed information for a specific journey by ID. Access may be limited based on user role and relationship to the journey.",
        "parameters": [
          {
            "description": "The ID of the journey to retrieve",
            "example": 123,
            "in": "path",
            "name": "journey_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Journey"
                }
              }
            },
            "description": "Journey details retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get journey details by ID",
        "tags": [
          "Journeys"
        ]
      },
      "put": {
        "description": "Update detailed information for a specific journey by ID. Access may be limited based on user role and relationship to the journey.",
        "parameters": [
          {
            "description": "The ID of the journey to update",
            "example": 123,
            "in": "path",
            "name": "journey_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "basic_update": {
                  "summary": "Basic journey information update",
                  "value": {
                    "passenger_count": 3,
                    "pickup_time": "2024-12-31T11:00:00Z"
                  }
                },
                "complete_update": {
                  "summary": "Complete journey profile update",
                  "value": {
                    "destination": "456 Oak Ave, City, State",
                    "estimated_cost": 65.0,
                    "passenger_count": 4,
                    "pickup_location": "123 Main St, City, State",
                    "pickup_time": "2024-12-31T10:00:00Z",
                    "special_requirements": "Child seat required",
                    "status": "confirmed",
                    "vehicle_type": "suv"
                  }
                },
                "status_update": {
                  "summary": "Status change update",
                  "value": {
                    "status": "confirmed"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "destination": {
                    "description": "Destination address",
                    "example": "456 Oak Ave, City, State",
                    "type": "string"
                  },
                  "estimated_cost": {
                    "description": "Estimated journey cost",
                    "example": 45.5,
                    "format": "float",
                    "type": "number"
                  },
                  "passenger_count": {
                    "description": "Number of passengers",
                    "example": 2,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "pickup_location": {
                    "description": "Pickup location address",
                    "example": "123 Main St, City, State",
                    "type": "string"
                  },
                  "pickup_time": {
                    "description": "Scheduled pickup time",
                    "example": "2024-12-31T10:00:00Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "special_requirements": {
                    "description": "Any special requirements",
                    "example": "Child seat required",
                    "type": "string"
                  },
                  "status": {
                    "description": "Journey status",
                    "enum": [
                      "pending",
                      "confirmed",
                      "in_progress",
                      "completed",
                      "cancelled"
                    ],
                    "example": "confirmed",
                    "type": "string"
                  },
                  "vehicle_type": {
                    "description": "Required vehicle type",
                    "example": "sedan",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "journey": {
                      "$ref": "#/components/schemas/Journey"
                    },
                    "message": {
                      "example": "Journey updated successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey details successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request data",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update journey details",
        "tags": [
          "Journeys"
        ]
      }
    },
    "/api/v1/journeys/{journey_id}/assign-driver": {
      "post": {
        "description": "Assign a driver to a specific journey. Only vendors can assign drivers to journeys.",
        "parameters": [
          {
            "description": "The ID of the journey to assign driver to",
            "example": 123,
            "in": "path",
            "name": "journey_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "assign_driver": {
                  "summary": "Assign driver to journey",
                  "value": {
                    "driver_id": 456
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "driver_id": {
                    "description": "The ID of the driver to assign",
                    "example": 456,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "driver_id"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "journey": {
                      "$ref": "#/components/schemas/Journey"
                    },
                    "message": {
                      "example": "Driver assigned successfully",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver assigned successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to assign driver",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data or failed to assign driver"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Assign a driver to a journey",
        "tags": [
          "Journeys"
        ]
      }
    },
    "/api/v1/journeys/{journey_id}/cancel": {
      "post": {
        "description": "Cancel a specific journey with an optional reason. Different roles may have different permissions to cancel journeys.",
        "parameters": [
          {
            "description": "The ID of the journey to cancel",
            "example": 123,
            "in": "path",
            "name": "journey_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "cancel_with_reason": {
                  "summary": "Cancel journey with reason",
                  "value": {
                    "reason": "Client requested cancellation"
                  }
                },
                "cancel_without_reason": {
                  "summary": "Cancel journey without reason",
                  "value": {}
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "reason": {
                    "description": "Reason for cancellation (optional)",
                    "example": "Client requested cancellation",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey cancelled successfully",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey cancelled successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to cancel journey",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Failed to cancel journey"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey cannot be cancelled in current state",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey cannot be cancelled in current state"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Cancel a journey",
        "tags": [
          "Journeys"
        ]
      }
    },
    "/api/v1/journeys/{journey_id}/payments": {
      "get": {
        "description": "Retrieve a paginated list of all payments associated with a specific journey.",
        "parameters": [
          {
            "description": "The ID of the journey to get payments for",
            "example": 123,
            "in": "path",
            "name": "journey_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pagination": {
                      "properties": {
                        "has_next": {
                          "example": false,
                          "type": "boolean"
                        },
                        "has_prev": {
                          "example": false,
                          "type": "boolean"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 1,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 5,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "payments": {
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of payments retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all payments associated with a journey",
        "tags": [
          "Journeys"
        ]
      }
    },
    "/api/v1/journeys/{journey_id}/status": {
      "put": {
        "description": "Update the status of a specific journey. Different roles may have different permissions to update status.",
        "parameters": [
          {
            "description": "The ID of the journey to update status for",
            "example": 123,
            "in": "path",
            "name": "journey_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "complete_journey": {
                  "summary": "Mark journey as completed",
                  "value": {
                    "status": "completed"
                  }
                },
                "confirm_journey": {
                  "summary": "Confirm a pending journey",
                  "value": {
                    "status": "confirmed"
                  }
                },
                "start_journey": {
                  "summary": "Mark journey as in progress",
                  "value": {
                    "status": "in_progress"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "description": "New status for the journey",
                    "enum": [
                      "pending",
                      "confirmed",
                      "in_progress",
                      "completed",
                      "cancelled"
                    ],
                    "example": "confirmed",
                    "type": "string"
                  }
                },
                "required": [
                  "status"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "journey": {
                      "$ref": "#/components/schemas/Journey"
                    },
                    "message": {
                      "example": "Journey status updated",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey status updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to update journey status",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data or failed to update status"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Invalid status transition",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid status transition"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update journey status",
        "tags": [
          "Journeys"
        ]
      }
    },
    "/api/v1/journeys/{journey_id}/waybills": {
      "get": {
        "description": "Retrieve a paginated list of all waybills associated with a specific journey.",
        "parameters": [
          {
            "description": "The ID of the journey to get waybills for",
            "example": 123,
            "in": "path",
            "name": "journey_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pagination": {
                      "properties": {
                        "has_next": {
                          "example": false,
                          "type": "boolean"
                        },
                        "has_prev": {
                          "example": false,
                          "type": "boolean"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 1,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 3,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "waybills": {
                      "items": {
                        "$ref": "#/components/schemas/Waybill"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of waybills retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Journey not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Journey not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all waybills associated with a journey",
        "tags": [
          "Journeys"
        ]
      }
    },
    "/api/v1/notifications/": {
      "get": {
        "description": "Retrieve all notifications for the authenticated user with pagination and filtering options.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of notifications per page",
            "example": 20,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter to show only unread notifications",
            "example": false,
            "in": "query",
            "name": "unread_only",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "notifications": {
                          "items": {
                            "$ref": "#/components/schemas/Notification"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "properties": {
                            "has_next": {
                              "example": true,
                              "type": "boolean"
                            },
                            "has_prev": {
                              "example": false,
                              "type": "boolean"
                            },
                            "page": {
                              "example": 1,
                              "type": "integer"
                            },
                            "pages": {
                              "example": 8,
                              "type": "integer"
                            },
                            "per_page": {
                              "example": 20,
                              "type": "integer"
                            },
                            "total": {
                              "example": 150,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notifications retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all notifications for the current user",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/admin": {
      "post": {
        "description": "Send a notification to a specific user. Requires admin privileges.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "basic_notification": {
                  "summary": "Basic notification",
                  "value": {
                    "message": "Your order has been processed successfully",
                    "notification_type": "order",
                    "user_id": 123
                  }
                },
                "detailed_notification": {
                  "summary": "Detailed notification with action",
                  "value": {
                    "action_url": "/payments/456",
                    "expiry_date": "Wed, 31 Dec 2025 23:59:59 GMT",
                    "message": "Your payment is due in 3 days",
                    "notification_type": "payment",
                    "reference_id": 456,
                    "user_id": 123
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "action_url": {
                    "description": "URL for notification action (optional)",
                    "example": "/orders/456",
                    "format": "uri",
                    "type": "string"
                  },
                  "expiry_date": {
                    "description": "Notification expiry date (optional)",
                    "example": "Wed, 31 Dec 2025 23:59:59 GMT",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "Notification message content",
                    "example": "Your order has been processed successfully",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "notification_type": {
                    "description": "Type of notification",
                    "enum": [
                      "info",
                      "warning",
                      "error",
                      "success",
                      "order",
                      "payment",
                      "system"
                    ],
                    "example": "order",
                    "type": "string"
                  },
                  "reference_id": {
                    "description": "Reference ID for related entity (optional)",
                    "example": 456,
                    "type": "integer"
                  },
                  "user_id": {
                    "description": "ID of the user to send notification to",
                    "example": 123,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "user_id",
                  "message",
                  "notification_type"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Notification"
                    },
                    "message": {
                      "example": "Notification sent successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notification sent successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "message": [
                          "Message is required"
                        ],
                        "user_id": [
                          "User ID is required"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request data",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Admin access required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Admin access required"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Send a notification to a user (admin only)",
        "tags": [
          "Notifications - Admin"
        ]
      }
    },
    "/api/v1/notifications/bulk": {
      "post": {
        "description": "Send notifications to multiple users at once. Requires admin privileges.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "promotional_notification": {
                  "summary": "Promotional notification",
                  "value": {
                    "expiry_date": "Wed, 31 Dec 2025 23:59:59 GMT",
                    "message": "Special offer available - 20% off all orders",
                    "notification_type": "info",
                    "user_ids": [
                      123,
                      456,
                      789,
                      101,
                      102
                    ]
                  }
                },
                "system_notification": {
                  "summary": "System notification to multiple users",
                  "value": {
                    "action_url": "/maintenance-info",
                    "message": "System maintenance scheduled for tonight",
                    "notification_type": "system",
                    "user_ids": [
                      123,
                      456,
                      789
                    ]
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "action_url": {
                    "description": "URL for notification action (optional)",
                    "example": "/maintenance-info",
                    "format": "uri",
                    "type": "string"
                  },
                  "expiry_date": {
                    "description": "Notification expiry date (optional)",
                    "example": "Wed, 31 Dec 2025 23:59:59 GMT",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "Notification message content",
                    "example": "System maintenance scheduled for tonight",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "notification_type": {
                    "description": "Type of notification",
                    "enum": [
                      "info",
                      "warning",
                      "error",
                      "success",
                      "order",
                      "payment",
                      "system"
                    ],
                    "example": "system",
                    "type": "string"
                  },
                  "reference_id": {
                    "description": "Reference ID for related entity (optional)",
                    "example": 456,
                    "type": "integer"
                  },
                  "user_ids": {
                    "description": "Array of user IDs to send notifications to",
                    "example": [
                      123,
                      456,
                      789
                    ],
                    "items": {
                      "minimum": 1,
                      "type": "integer"
                    },
                    "maxItems": 1000,
                    "minItems": 1,
                    "type": "array"
                  }
                },
                "required": [
                  "user_ids",
                  "message",
                  "notification_type"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "count": {
                          "example": 5,
                          "type": "integer"
                        },
                        "user_ids": {
                          "example": [
                            123,
                            456,
                            789,
                            101,
                            102
                          ],
                          "items": {
                            "type": "integer"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "5 notifications sent successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bulk notifications sent successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "message": [
                          "Message is required"
                        ],
                        "user_ids": [
                          "At least one user ID is required"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request data",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Admin access required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Admin access required"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Send notifications to multiple users (admin only)",
        "tags": [
          "Notifications - Admin"
        ]
      }
    },
    "/api/v1/notifications/read-all": {
      "patch": {
        "description": "Mark all notifications as read for the authenticated user.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "count": {
                          "example": 5,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "5 notifications marked as read",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "All notifications marked as read successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Mark all notifications as read for the current user",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/{notification_id}": {
      "delete": {
        "description": "Delete a specific notification. Only accessible to the notification owner.",
        "parameters": [
          {
            "description": "The ID of the notification to delete",
            "example": 42,
            "in": "path",
            "name": "notification_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Notification deleted successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notification deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Notification not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notification not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Delete a notification",
        "tags": [
          "Notifications"
        ]
      },
      "get": {
        "description": "Retrieve a specific notification by its ID. Only accessible to the notification owner.",
        "parameters": [
          {
            "description": "The ID of the notification to retrieve",
            "example": 42,
            "in": "path",
            "name": "notification_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Notification"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notification retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Notification not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notification not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get a specific notification",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/notifications/{notification_id}/read": {
      "patch": {
        "description": "Mark a specific notification as read. Only accessible to the notification owner.",
        "parameters": [
          {
            "description": "The ID of the notification to mark as read",
            "example": 42,
            "in": "path",
            "name": "notification_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Notification"
                    },
                    "message": {
                      "example": "Notification marked as read",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notification marked as read successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Notification not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Notification not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Mark a notification as read",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v1/payments/": {
      "get": {
        "description": "Retrieve a paginated list of payments with optional filtering by status, payment type, and journey ID.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by payment status",
            "example": "completed",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "completed",
                "failed",
                "cancelled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by payment type",
            "example": "journey",
            "in": "query",
            "name": "payment_type",
            "required": false,
            "schema": {
              "enum": [
                "journey",
                "advance",
                "refund",
                "bonus"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by journey ID",
            "example": 123,
            "in": "query",
            "name": "journey_id",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 5,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 50,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "payments": {
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of payments retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all payments with optional filtering",
        "tags": [
          "Payments"
        ]
      },
      "post": {
        "description": "Create a new payment record. Access limited to clients, vendors, admins, and super admins.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "advance_payment": {
                  "summary": "Advance payment",
                  "value": {
                    "amount": 100.0,
                    "description": "Advance payment for upcoming journeys",
                    "journey_id": 124,
                    "payment_method": "bank_transfer",
                    "payment_type": "advance"
                  }
                },
                "journey_payment": {
                  "summary": "Journey payment",
                  "value": {
                    "amount": 25.5,
                    "description": "Payment for journey from A to B",
                    "journey_id": 123,
                    "payment_method": "card",
                    "payment_type": "journey"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Payment amount",
                    "example": 25.5,
                    "format": "float",
                    "type": "number"
                  },
                  "description": {
                    "description": "Payment description",
                    "example": "Payment for journey from A to B",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "journey_id": {
                    "description": "Associated journey ID",
                    "example": 123,
                    "type": "integer"
                  },
                  "payment_method": {
                    "description": "Payment method used",
                    "enum": [
                      "cash",
                      "card",
                      "bank_transfer",
                      "mobile_money"
                    ],
                    "example": "card",
                    "type": "string"
                  },
                  "payment_type": {
                    "description": "Type of payment",
                    "enum": [
                      "journey",
                      "advance",
                      "refund",
                      "bonus"
                    ],
                    "example": "journey",
                    "type": "string"
                  },
                  "reference_id": {
                    "description": "External reference ID",
                    "example": "REF123456",
                    "maxLength": 100,
                    "type": "string"
                  }
                },
                "required": [
                  "journey_id",
                  "amount",
                  "payment_method",
                  "payment_type"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "amount": {
                      "example": 25.5,
                      "format": "float",
                      "type": "number"
                    },
                    "created_at": {
                      "example": "Mon, 01 Jan 2024 12:00:00 GMT",
                      "format": "date-time",
                      "type": "string"
                    },
                    "id": {
                      "example": 456,
                      "type": "integer"
                    },
                    "journey_id": {
                      "example": 123,
                      "type": "integer"
                    },
                    "payment_method": {
                      "example": "card",
                      "type": "string"
                    },
                    "payment_type": {
                      "example": "journey",
                      "type": "string"
                    },
                    "status": {
                      "example": "pending",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to create payment",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Failed to create payment"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a new payment",
        "tags": [
          "Payments"
        ]
      }
    },
    "/api/v1/payments/bank-accounts": {
      "get": {
        "description": "Retrieve all bank accounts associated with the current user.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "bank_accounts": {
                      "items": {
                        "$ref": "#/components/schemas/BankAccount"
                      },
                      "type": "array"
                    },
                    "total": {
                      "example": 2,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of bank accounts retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all bank accounts for the current user",
        "tags": [
          "Bank Accounts"
        ]
      },
      "post": {
        "description": "Create a new bank account for the current user.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "business_account": {
                  "summary": "Business savings account",
                  "value": {
                    "account_name": "ABC Company Ltd",
                    "account_number": 9876543210,
                    "account_type": "business",
                    "bank_code": 987654321,
                    "bank_name": "Business Bank",
                    "currency": "USD",
                    "is_primary": false
                  }
                },
                "personal_account": {
                  "summary": "Personal checking account",
                  "value": {
                    "account_name": "John Doe",
                    "account_number": 1234567890,
                    "account_type": "checking",
                    "bank_code": 123456789,
                    "bank_name": "First National Bank",
                    "branch_code": 1,
                    "currency": "USD",
                    "is_primary": true
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_name": {
                    "description": "Account holder name",
                    "example": "John Doe",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "account_number": {
                    "description": "Bank account number",
                    "example": 1234567890,
                    "maxLength": 50,
                    "type": "string"
                  },
                  "account_type": {
                    "description": "Type of bank account",
                    "enum": [
                      "checking",
                      "savings",
                      "business"
                    ],
                    "example": "checking",
                    "type": "string"
                  },
                  "bank_code": {
                    "description": "Bank code or routing number",
                    "example": 123456789,
                    "maxLength": 20,
                    "type": "string"
                  },
                  "bank_name": {
                    "description": "Name of the bank",
                    "example": "First National Bank",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "branch_code": {
                    "description": "Branch code",
                    "example": 1,
                    "maxLength": 20,
                    "type": "string"
                  },
                  "currency": {
                    "description": "Account currency (ISO 4217 code)",
                    "example": "USD",
                    "maxLength": 3,
                    "type": "string"
                  },
                  "is_primary": {
                    "description": "Whether this is the primary account",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "account_name",
                  "account_number",
                  "bank_name",
                  "account_type"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            },
            "description": "Bank account created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to create bank account",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Failed to create bank account"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a new bank account",
        "tags": [
          "Bank Accounts"
        ]
      }
    },
    "/api/v1/payments/bank-accounts/{account_id}": {
      "delete": {
        "description": "Delete a bank account by ID. Users can only delete their own bank accounts unless they have administrative privileges.",
        "parameters": [
          {
            "description": "The ID of the bank account to delete",
            "example": 42,
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "successful_deletion": {
                    "summary": "Successful bank account deletion",
                    "value": {
                      "message": "Bank account deleted successfully"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Bank account deleted successfully",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bank account successfully deleted"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized to delete this bank account",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "not_found": {
                    "summary": "Bank account not found",
                    "value": {
                      "message": "Bank account not found or unauthorized"
                    }
                  },
                  "unauthorized": {
                    "summary": "Unauthorized access to bank account",
                    "value": {
                      "message": "Bank account not found or unauthorized"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Bank account not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bank account not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Delete a bank account",
        "tags": [
          "Bank Accounts"
        ]
      },
      "put": {
        "description": "Update details for a specific bank account owned by the current user.",
        "parameters": [
          {
            "description": "The ID of the bank account to update",
            "example": 123,
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "basic_update": {
                  "summary": "Update account name",
                  "value": {
                    "account_name": "John Smith"
                  }
                },
                "status_update": {
                  "summary": "Update account status",
                  "value": {
                    "is_active": false
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_name": {
                    "description": "Account holder name",
                    "example": "John Doe",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "account_number": {
                    "description": "Bank account number",
                    "example": 1234567890,
                    "maxLength": 50,
                    "type": "string"
                  },
                  "account_type": {
                    "description": "Type of bank account",
                    "enum": [
                      "checking",
                      "savings",
                      "business"
                    ],
                    "example": "checking",
                    "type": "string"
                  },
                  "bank_code": {
                    "description": "Bank code or routing number",
                    "example": 123456789,
                    "maxLength": 20,
                    "type": "string"
                  },
                  "bank_name": {
                    "description": "Name of the bank",
                    "example": "First National Bank",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "branch_code": {
                    "description": "Branch code",
                    "example": 1,
                    "maxLength": 20,
                    "type": "string"
                  },
                  "currency": {
                    "description": "Account currency (ISO 4217 code)",
                    "example": "USD",
                    "maxLength": 3,
                    "type": "string"
                  },
                  "is_active": {
                    "description": "Whether this account is active",
                    "example": true,
                    "type": "boolean"
                  },
                  "is_primary": {
                    "description": "Whether this is the primary account",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            },
            "description": "Bank account updated successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Bank account not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bank account not found or unauthorized"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update bank account details",
        "tags": [
          "Bank Accounts"
        ]
      }
    },
    "/api/v1/payments/requests": {
      "get": {
        "description": "Retrieve a paginated list of payment requests with optional filtering by status and request type.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by request status",
            "example": "pending",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "approved",
                "rejected",
                "paid"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by request type",
            "example": "petrol",
            "in": "query",
            "name": "request_type",
            "required": false,
            "schema": {
              "enum": [
                "petrol",
                "maintenance",
                "insurance",
                "other"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 3,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 25,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "payment_requests": {
                      "items": {
                        "$ref": "#/components/schemas/PaymentRequest"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "List of payment requests retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all payment requests with optional filtering",
        "tags": [
          "Payment Requests"
        ]
      },
      "post": {
        "description": "Create a new payment request for petrol, maintenance, or other expenses.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "maintenance_request": {
                  "summary": "Maintenance payment request",
                  "value": {
                    "amount": 200.0,
                    "description": "Vehicle service and oil change",
                    "receipt_url": "https://example.com/receipt.jpg",
                    "request_type": "maintenance",
                    "urgency": "high",
                    "vehicle_id": 789
                  }
                },
                "petrol_request": {
                  "summary": "Petrol payment request",
                  "value": {
                    "amount": 50.0,
                    "description": "Fuel for vehicle maintenance",
                    "request_type": "petrol",
                    "urgency": "medium",
                    "vehicle_id": 789
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Requested amount",
                    "example": 50.0,
                    "format": "float",
                    "type": "number"
                  },
                  "description": {
                    "description": "Description of the request",
                    "example": "Fuel for vehicle maintenance",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "receipt_url": {
                    "description": "URL to receipt or proof of expense",
                    "example": "https://example.com/receipt.jpg",
                    "format": "uri",
                    "type": "string"
                  },
                  "request_type": {
                    "description": "Type of payment request",
                    "enum": [
                      "petrol",
                      "maintenance",
                      "insurance",
                      "other"
                    ],
                    "example": "petrol",
                    "type": "string"
                  },
                  "urgency": {
                    "description": "Request urgency level",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "urgent"
                    ],
                    "example": "medium",
                    "type": "string"
                  },
                  "vehicle_id": {
                    "description": "Associated vehicle ID",
                    "example": 789,
                    "type": "integer"
                  }
                },
                "required": [
                  "request_type",
                  "amount",
                  "description"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              }
            },
            "description": "Payment request created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to create payment request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Failed to create payment request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Create a new payment request",
        "tags": [
          "Payments Requests"
        ]
      }
    },
    "/api/v1/payments/requests/{request_id}": {
      "get": {
        "description": "Retrieve detailed information for a specific payment request by ID.",
        "parameters": [
          {
            "description": "The ID of the payment request to retrieve",
            "example": 789,
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequest"
                }
              }
            },
            "description": "Payment request details retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Payment request not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment request not found or unauthorized"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get payment request details by ID",
        "tags": [
          "Payment Requests"
        ]
      }
    },
    "/api/v1/payments/requests/{request_id}/approve": {
      "post": {
        "description": "Approve a pending payment request. Access limited to vendors, admins, and super admins.",
        "parameters": [
          {
            "description": "The ID of the payment request to approve",
            "example": 789,
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "approval_with_changes": {
                  "summary": "Approval with amount adjustment",
                  "value": {
                    "approved_amount": 45.0,
                    "notes": "Approved with reduced amount due to budget constraints"
                  }
                },
                "simple_approval": {
                  "summary": "Simple approval",
                  "value": {}
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "approved_amount": {
                    "description": "Approved amount (if different from requested)",
                    "example": 45.0,
                    "format": "float",
                    "type": "number"
                  },
                  "notes": {
                    "description": "Approval notes",
                    "example": "Approved with reduced amount",
                    "maxLength": 500,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Payment request approved successfully",
                      "type": "string"
                    },
                    "request": {
                      "$ref": "#/components/schemas/PaymentRequest"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment request approved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to approve payment request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Failed to approve payment request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Approve a payment request",
        "tags": [
          "Payment Requests"
        ]
      }
    },
    "/api/v1/payments/requests/{request_id}/reject": {
      "post": {
        "description": "Reject a pending payment request with optional reason. Access limited to vendors, admins, and super admins.",
        "parameters": [
          {
            "description": "The ID of the payment request to reject",
            "example": 789,
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "rejection_with_reason": {
                  "summary": "Rejection with reason",
                  "value": {
                    "reason": "Insufficient documentation provided"
                  }
                },
                "simple_rejection": {
                  "summary": "Simple rejection",
                  "value": {}
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "reason": {
                    "description": "Reason for rejection",
                    "example": "Insufficient documentation provided",
                    "maxLength": 500,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Payment request rejected successfully",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment request rejected successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Failed to reject payment request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Failed to reject payment request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Reject a payment request",
        "tags": [
          "Payment Requests"
        ]
      }
    },
    "/api/v1/payments/{payment_id}": {
      "get": {
        "description": "Retrieve detailed information for a specific payment by ID.",
        "parameters": [
          {
            "description": "The ID of the payment to retrieve",
            "example": 456,
            "in": "path",
            "name": "payment_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": "Payment details retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Payment not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment not found or unauthorized"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get payment details by ID",
        "tags": [
          "Payments"
        ]
      },
      "put": {
        "description": "Update payment status or details. Access limited to admins and super admins.",
        "parameters": [
          {
            "description": "The ID of the payment to update",
            "example": 456,
            "in": "path",
            "name": "payment_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "amount_update": {
                  "summary": "Update payment amount",
                  "value": {
                    "amount": 30.0,
                    "description": "Updated payment amount"
                  }
                },
                "status_update": {
                  "summary": "Update payment status",
                  "value": {
                    "status": "completed"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Payment amount",
                    "example": 25.5,
                    "format": "float",
                    "type": "number"
                  },
                  "description": {
                    "description": "Payment description",
                    "example": "Updated payment description",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "reference_id": {
                    "description": "External reference ID",
                    "example": "REF123456",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "status": {
                    "description": "Payment status",
                    "enum": [
                      "pending",
                      "completed",
                      "failed",
                      "cancelled"
                    ],
                    "example": "completed",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "description": "Payment updated successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Payment not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payment not found or unauthorized"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update payment status or details",
        "tags": [
          "Payments"
        ]
      }
    },
    "/api/v1/users/me": {
      "get": {
        "description": "Returns the authenticated user's profile information including role-specific details",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "details": {
                          "type": "object"
                        },
                        "email": {
                          "example": "john.doe@example.com",
                          "type": "string"
                        },
                        "id": {
                          "example": 1,
                          "type": "integer"
                        },
                        "user_type": {
                          "example": "CUSTOMER",
                          "type": "string"
                        },
                        "username": {
                          "example": "johndoe",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User profile retrieved successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "User not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "An error occurred processing your request",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Updates the authenticated user's profile information",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "example": "new.email@example.com",
                    "type": "string"
                  },
                  "first_name": {
                    "example": "John",
                    "type": "string"
                  },
                  "last_name": {
                    "example": "Doe",
                    "type": "string"
                  },
                  "phone_number": {
                    "example": "+1234567890",
                    "type": "string"
                  },
                  "username": {
                    "example": "newusername",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "User data to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "User updated successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "email": {
                          "example": "new.email@example.com",
                          "type": "string"
                        },
                        "id": {
                          "example": 1,
                          "type": "integer"
                        },
                        "username": {
                          "example": "newusername",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation error",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "User not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "An error occurred processing your request",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update current user profile",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/permissions": {
      "get": {
        "description": "Returns all permissions assigned to the authenticated user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "permissions": {
                      "items": {
                        "properties": {
                          "description": {
                            "example": "Can create new posts",
                            "type": "string"
                          },
                          "id": {
                            "example": 1,
                            "type": "integer"
                          },
                          "name": {
                            "example": "create:posts",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User permissions retrieved successfully"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "An error occurred processing your request",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get current user permissions",
        "tags": [
          "Users - Permissions"
        ]
      }
    },
    "/api/v1/users/roles": {
      "get": {
        "description": "Returns all roles assigned to the authenticated user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "roles": {
                      "items": {
                        "properties": {
                          "description": {
                            "example": "Can edit content",
                            "type": "string"
                          },
                          "id": {
                            "example": 1,
                            "type": "integer"
                          },
                          "name": {
                            "example": "editor",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User roles retrieved successfully"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "An error occurred processing your request",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get current user roles",
        "tags": [
          "Users - Roles"
        ]
      }
    },
    "/api/v1/users/{user_id}": {
      "get": {
        "description": "Returns a specific user's profile information (accessible only by admin or the user themselves)",
        "parameters": [
          {
            "description": "ID of the user to retrieve",
            "example": 1,
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "email": {
                          "example": "john.doe@example.com",
                          "type": "string"
                        },
                        "id": {
                          "example": 1,
                          "type": "integer"
                        },
                        "user_type": {
                          "example": "CUSTOMER",
                          "type": "string"
                        },
                        "username": {
                          "example": "johndoe",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User profile retrieved successfully"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized access",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "User not found",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "User not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "An error occurred processing your request",
                      "type": "string"
                    },
                    "status": {
                      "example": "error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get specific user profile",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/vendors/": {
      "get": {
        "description": "Retrieve a paginated list of all vendors with optional status filtering. Access restricted to admin and super_admin roles.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter vendors by status",
            "example": "active",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "inactive",
                "suspended",
                "pending"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 5,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 50,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "vendors": {
                      "items": {
                        "$ref": "#/components/schemas/Vendor"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendors retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Admin access required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all vendors with optional filtering",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/vendors/{vendor_id}": {
      "get": {
        "description": "Retrieve detailed information for a specific vendor by ID. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor to retrieve",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            },
            "description": "Vendor details retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get vendor details by ID",
        "tags": [
          "Vendors"
        ]
      },
      "put": {
        "description": "Update detailed information for a specific vendor by ID. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor to update",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "basic_update": {
                  "summary": "Basic vendor information update",
                  "value": {
                    "contact_person": "John Smith",
                    "name": "ABC Transport Services",
                    "phone": 1234567890
                  }
                },
                "complete_update": {
                  "summary": "Complete vendor profile update",
                  "value": {
                    "address": "123 Main Street, City, State 12345",
                    "contact_person": "John Smith",
                    "description": "Reliable transport service provider",
                    "email": "contact@abctransport.com",
                    "name": "ABC Transport Services",
                    "phone": 1234567890,
                    "registration_number": "REG123456789",
                    "status": "active",
                    "website": "https://www.abctransport.com"
                  }
                },
                "status_update": {
                  "summary": "Status change update",
                  "value": {
                    "status": "inactive"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "Vendor's business address",
                    "example": "123 Main Street, City, State 12345",
                    "type": "string"
                  },
                  "contact_person": {
                    "description": "Primary contact person name",
                    "example": "John Smith",
                    "type": "string"
                  },
                  "description": {
                    "description": "Vendor description or notes",
                    "example": "Reliable transport service provider",
                    "type": "string"
                  },
                  "email": {
                    "description": "Vendor's email address",
                    "example": "contact@abctransport.com",
                    "format": "email",
                    "type": "string"
                  },
                  "name": {
                    "description": "Vendor's company name",
                    "example": "ABC Transport Services",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "phone": {
                    "description": "Vendor's phone number",
                    "example": 1234567890,
                    "pattern": "^[\\+]?[1-9][\\d]{0,15}$",
                    "type": "string"
                  },
                  "registration_number": {
                    "description": "Business registration number",
                    "example": "REG123456789",
                    "type": "string"
                  },
                  "status": {
                    "description": "Vendor's current status",
                    "enum": [
                      "active",
                      "inactive",
                      "suspended",
                      "pending"
                    ],
                    "example": "active",
                    "type": "string"
                  },
                  "tax_id": {
                    "description": "Tax identification number",
                    "example": "TAX987654321",
                    "type": "string"
                  },
                  "website": {
                    "description": "Vendor's website URL",
                    "example": "https://www.abctransport.com",
                    "format": "uri",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor updated successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "vendor": {
                      "$ref": "#/components/schemas/Vendor"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor details successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "example": {
                        "email": [
                          "Invalid email format"
                        ],
                        "phone": [
                          "Phone number is required"
                        ]
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Invalid request data",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Unauthorized to update this vendor",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized access"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor not found or unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "additionalProperties": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "type": "object"
                    },
                    "message": {
                      "example": "Validation failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Update vendor details",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/vendors/{vendor_id}/clients": {
      "get": {
        "description": "Retrieve a paginated list of all clients associated with a specific vendor. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clients": {
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 3,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 30,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor clients retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all clients associated with a vendor",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/vendors/{vendor_id}/driver-requests": {
      "get": {
        "description": "Retrieve a paginated list of all pending driver join requests for a specific vendor. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 1,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 5,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "requests": {
                      "items": {
                        "$ref": "#/components/schemas/DriverRequest"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver requests retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all pending driver join requests",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/vendors/{vendor_id}/driver-requests/{request_id}/approve": {
      "post": {
        "description": "Approve a pending driver join request for a specific vendor. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The ID of the driver join request",
            "example": 456,
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver request approved successfully",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver request approved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Request not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Approve a driver join request",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/vendors/{vendor_id}/driver-requests/{request_id}/reject": {
      "post": {
        "description": "Reject a pending driver join request for a specific vendor with an optional reason. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The ID of the driver join request",
            "example": 456,
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "with_reason": {
                  "summary": "Rejection with reason",
                  "value": {
                    "reason": "Driver does not meet our requirements"
                  }
                },
                "without_reason": {
                  "summary": "Rejection without reason",
                  "value": {}
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "reason": {
                    "description": "Optional reason for rejection",
                    "example": "Driver does not meet our requirements",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver request rejected successfully",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Driver request rejected successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Request not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Reject a driver join request",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/vendors/{vendor_id}/drivers": {
      "get": {
        "description": "Retrieve a paginated list of all drivers associated with a specific vendor. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter drivers by status",
            "example": "active",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "inactive",
                "suspended",
                "pending"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "drivers": {
                      "items": {
                        "$ref": "#/components/schemas/Driver"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 3,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 25,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor drivers retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all drivers associated with a vendor",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/vendors/{vendor_id}/journeys": {
      "get": {
        "description": "Retrieve a paginated list of all journeys associated with a specific vendor. Access may be limited based on user role and relationship to the vendor.",
        "parameters": [
          {
            "description": "The ID of the vendor",
            "example": 123,
            "in": "path",
            "name": "vendor_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter journeys by status",
            "example": "active",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "active",
                "completed",
                "cancelled"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "journeys": {
                      "items": {
                        "$ref": "#/components/schemas/Journey"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 8,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 75,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor journeys retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Vendor not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Vendor not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all journeys associated with a vendor",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/api/v1/waybills/": {
      "get": {
        "description": "Retrieve a paginated list of waybills with optional filtering by verification status, journey, and driver. Access may be limited based on user role and permissions.",
        "parameters": [
          {
            "description": "Page number for pagination",
            "example": 1,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "example": 10,
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by verification status",
            "example": true,
            "in": "query",
            "name": "verified",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by specific journey ID",
            "example": 101,
            "in": "query",
            "name": "journey_id",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by specific driver ID",
            "example": 42,
            "in": "query",
            "name": "driver_id",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filters": {
                      "properties": {
                        "driver_id": {
                          "example": 42,
                          "type": "integer"
                        },
                        "journey_id": {
                          "example": 101,
                          "type": "integer"
                        },
                        "verified": {
                          "example": true,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "pagination": {
                      "properties": {
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 5,
                          "type": "integer"
                        },
                        "per_page": {
                          "example": 10,
                          "type": "integer"
                        },
                        "total": {
                          "example": 45,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "waybills": {
                      "items": {
                        "$ref": "#/components/schemas/Waybill"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Waybills retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get all waybills with optional filtering",
        "tags": [
          "Waybills"
        ]
      },
      "post": {
        "description": "Allows drivers to upload waybill documents for a journey. Access restricted to drivers only.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "examples": {
                "basic_upload": {
                  "summary": "Basic waybill upload",
                  "value": {
                    "file": "[binary file data]",
                    "journey_id": 101
                  }
                },
                "with_waybill_number": {
                  "summary": "Upload with waybill number",
                  "value": {
                    "file": "[binary file data]",
                    "journey_id": 101,
                    "waybill_number": "WBL-12345"
                  }
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "file": {
                    "description": "Waybill file to be uploaded (PDF, JPG, PNG accepted)",
                    "format": "binary",
                    "type": "string"
                  },
                  "journey_id": {
                    "description": "Journey ID for the waybill",
                    "example": 101,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "waybill_number": {
                    "description": "Optional waybill number for reference",
                    "example": "WBL-12345",
                    "type": "string"
                  }
                },
                "required": [
                  "file",
                  "journey_id"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Waybill uploaded successfully",
                      "type": "string"
                    },
                    "status": {
                      "example": "success",
                      "type": "string"
                    },
                    "waybill": {
                      "$ref": "#/components/schemas/Waybill"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Waybill uploaded successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "No file uploaded or Journey ID missing",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Invalid request or file upload failure"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Driver access required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions - drivers only"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Invalid file format or size",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Upload a new waybill document",
        "tags": [
          "Waybills"
        ]
      }
    },
    "/api/v1/waybills/{waybill_id}": {
      "get": {
        "description": "Retrieve detailed information for a specific waybill by ID. Access may be limited based on user role and relationship to the waybill.",
        "parameters": [
          {
            "description": "The ID of the waybill to retrieve",
            "example": 789,
            "in": "path",
            "name": "waybill_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Waybill"
                }
              }
            },
            "description": "Waybill details retrieved successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Waybill not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Waybill not found or unauthorized"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Get waybill details by ID",
        "tags": [
          "Waybills"
        ]
      }
    },
    "/api/v1/waybills/{waybill_id}/download": {
      "get": {
        "description": "Download the original waybill file. Access may be limited based on user role and relationship to the waybill.",
        "parameters": [
          {
            "description": "The ID of the waybill file to download",
            "example": 789,
            "in": "path",
            "name": "waybill_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "description": "The waybill file content",
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "description": "PDF waybill file",
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "description": "JPEG waybill image",
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "description": "PNG waybill image",
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "File downloaded successfully",
            "headers": {
              "Content-Disposition": {
                "description": "Indicates the file should be downloaded",
                "schema": {
                  "example": "attachment; filename=\"waybill_789.pdf\"",
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the file in bytes",
                "schema": {
                  "example": 1024000,
                  "type": "integer"
                }
              },
              "Content-Type": {
                "description": "MIME type of the file",
                "schema": {
                  "example": "application/pdf",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Waybill not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Waybill not found or unauthorized"
          },
          "410": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "File no longer available",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "File no longer available"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Download a waybill file",
        "tags": [
          "Waybills"
        ]
      }
    },
    "/api/v1/waybills/{waybill_id}/verify": {
      "post": {
        "description": "Mark a waybill as verified. Access restricted to clients, vendors, admins, and super admins.",
        "parameters": [
          {
            "description": "The ID of the waybill to verify",
            "example": 789,
            "in": "path",
            "name": "waybill_id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Waybill verified successfully",
                      "type": "string"
                    },
                    "waybill": {
                      "$ref": "#/components/schemas/Waybill"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Waybill verified successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Authentication required",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Insufficient permissions to verify waybills",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Waybill not found or unauthorized",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Waybill not found or unauthorized"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Waybill is already verified",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Waybill already verified"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "example": "Internal server error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Server error"
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "Verify a waybill document",
        "tags": [
          "Waybills"
        ]
      }
    }
  }
}
